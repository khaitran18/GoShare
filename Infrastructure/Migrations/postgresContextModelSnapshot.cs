// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(postgresContext))]
    partial class postgresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("jobid_seq", "cron");

            modelBuilder.HasSequence("runid_seq", "cron");

            modelBuilder.Entity("Domain.DataModels.Appfeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("appfeedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short?>("Capacity")
                        .HasColumnType("smallint")
                        .HasColumnName("capacity");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("license_plate_number");

                    b.Property<string>("Make")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("model");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "LicensePlateNumber" }, "cars_license_plate_number_key")
                        .IsUnique();

                    b.ToTable("cars", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Carimage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid")
                        .HasColumnName("car_id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("link");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("carimages", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<Guid>("Receiver")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("Receiver");

                    b.HasIndex("Sender");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("character varying")
                        .HasColumnName("comment");

                    b.Property<Guid>("Ratee")
                        .HasColumnType("uuid")
                        .HasColumnName("ratee");

                    b.Property<Guid>("Rater")
                        .HasColumnType("uuid")
                        .HasColumnName("rater");

                    b.Property<short>("Rating1")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid")
                        .HasColumnName("trip_id");

                    b.HasKey("Id");

                    b.HasIndex("Ratee");

                    b.HasIndex("Rater");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<string>("EndAddress")
                        .HasColumnType("character varying")
                        .HasColumnName("end_address");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("Isfromcompany")
                        .HasColumnType("boolean")
                        .HasColumnName("isfromcompany");

                    b.Property<short>("Occupancy")
                        .HasColumnType("smallint")
                        .HasColumnName("occupancy");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddressUpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("address_update_date");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("text")
                        .HasColumnName("company_address");

                    b.Property<string>("DisabledReason")
                        .HasColumnType("character varying")
                        .HasColumnName("disabled_reason");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("Isdriver")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isdriver")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("Isverify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isverify")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Phone" }, "users_phone_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Appfeedback", b =>
                {
                    b.HasOne("Domain.DataModels.User", "User")
                        .WithMany("Appfeedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DataModels.Car", b =>
                {
                    b.HasOne("Domain.DataModels.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DataModels.Carimage", b =>
                {
                    b.HasOne("Domain.DataModels.Car", "Car")
                        .WithMany("Carimages")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("fk_car");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.DataModels.Chat", b =>
                {
                    b.HasOne("Domain.DataModels.User", "ReceiverNavigation")
                        .WithMany("ChatReceiverNavigations")
                        .HasForeignKey("Receiver")
                        .IsRequired()
                        .HasConstraintName("fk_receiver");

                    b.HasOne("Domain.DataModels.User", "SenderNavigation")
                        .WithMany("ChatSenderNavigations")
                        .HasForeignKey("Sender")
                        .IsRequired()
                        .HasConstraintName("fk_sender");

                    b.Navigation("ReceiverNavigation");

                    b.Navigation("SenderNavigation");
                });

            modelBuilder.Entity("Domain.DataModels.Rating", b =>
                {
                    b.HasOne("Domain.DataModels.User", "RateeNavigation")
                        .WithMany("RatingRateeNavigations")
                        .HasForeignKey("Ratee")
                        .IsRequired()
                        .HasConstraintName("fk_ratee");

                    b.HasOne("Domain.DataModels.User", "RaterNavigation")
                        .WithMany("RatingRaterNavigations")
                        .HasForeignKey("Rater")
                        .IsRequired()
                        .HasConstraintName("fk_rater");

                    b.Navigation("RateeNavigation");

                    b.Navigation("RaterNavigation");
                });

            modelBuilder.Entity("Domain.DataModels.Trip", b =>
                {
                    b.HasOne("Domain.DataModels.User", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("fk_driver");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Domain.DataModels.Car", b =>
                {
                    b.Navigation("Carimages");
                });

            modelBuilder.Entity("Domain.DataModels.User", b =>
                {
                    b.Navigation("Appfeedbacks");

                    b.Navigation("Cars");

                    b.Navigation("ChatReceiverNavigations");

                    b.Navigation("ChatSenderNavigations");

                    b.Navigation("RatingRateeNavigations");

                    b.Navigation("RatingRaterNavigations");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
