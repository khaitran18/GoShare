// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(GoShareContext))]
    [Migration("20231220032959_restore_setting")]
    partial class restore_setting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.DataModels.Appfeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("appfeedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("license_plate");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("model");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("VerifiedTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("verifiedto");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("cars", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Cartype", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("Capacity")
                        .HasColumnType("smallint")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Image")
                        .HasColumnType("character varying")
                        .HasColumnName("image");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id");

                    b.ToTable("cartypes", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<Guid>("Receiver")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uuid")
                        .HasColumnName("sender");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid")
                        .HasColumnName("trip_id");

                    b.HasKey("Id");

                    b.HasIndex("Receiver");

                    b.HasIndex("Sender");

                    b.HasIndex("TripId");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Driverdocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid")
                        .HasColumnName("car_id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("driverdocuments", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Fee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("BaseDistance")
                        .HasColumnType("double precision")
                        .HasColumnName("base_distance");

                    b.Property<double>("BasePrice")
                        .HasColumnType("double precision")
                        .HasColumnName("base_price");

                    b.Property<Guid>("CarType")
                        .HasColumnType("uuid")
                        .HasColumnName("car_type");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id");

                    b.HasIndex("CarType");

                    b.ToTable("fees", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Feepolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid>("FeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("fee_id");

                    b.Property<double?>("MaxDistance")
                        .HasColumnType("double precision")
                        .HasColumnName("max_distance");

                    b.Property<double>("MinDistance")
                        .HasColumnType("double precision")
                        .HasColumnName("min_distance");

                    b.Property<double>("PricePerKm")
                        .HasColumnType("double precision")
                        .HasColumnName("price_per_km");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.ToTable("feepolicies", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("character varying")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longtitude")
                        .HasColumnType("numeric")
                        .HasColumnName("longtitude");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("character varying")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid>("Ratee")
                        .HasColumnType("uuid")
                        .HasColumnName("ratee");

                    b.Property<Guid>("Rater")
                        .HasColumnType("uuid")
                        .HasColumnName("rater");

                    b.Property<short>("RatingValue")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid")
                        .HasColumnName("trip_id");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.HasKey("Id");

                    b.HasIndex("Ratee");

                    b.HasIndex("Rater");

                    b.HasIndex("TripId");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid")
                        .HasColumnName("trip_id");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<short>("DataUnit")
                        .HasColumnType("smallint")
                        .HasColumnName("data_unit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("key");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("settings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fffd271c-fb04-4761-a09f-5d359f6bf777"),
                            DataUnit = (short)5,
                            Description = "Bước nhảy bán kính mà hệ thống sẽ tìm kiếm tài xế xung quanh vị trí của khách hàng.",
                            Key = "FIND_DRIVER_RADIUS",
                            Value = 1.0
                        },
                        new
                        {
                            Id = new Guid("b7570277-4953-4c09-bfd0-e8e83025cd60"),
                            DataUnit = (short)5,
                            Description = "Bán kính tối đa mà hệ thống có thể mở rộng để tìm kiếm tài xế.",
                            Key = "MAX_FIND_DRIVER_RADIUS",
                            Value = 5.0
                        },
                        new
                        {
                            Id = new Guid("1429d7f1-3abc-42cd-8c0e-d8b57beb456b"),
                            DataUnit = (short)1,
                            Description = "Thời gian tối đa mà hệ thống sẽ tìm kiếm tài xế cho một chuyến đi.",
                            Key = "FIND_DRIVER_TIMEOUT",
                            Value = 10.0
                        },
                        new
                        {
                            Id = new Guid("1399aa1e-a23e-40e7-bde3-068e12390efc"),
                            DataUnit = (short)1,
                            Description = "Thời gian tối đa mà hệ thống sẽ chờ phản hồi xác nhận từ tài xế cho một chuyến đi.",
                            Key = "DRIVER_RESPONSE_TIMEOUT",
                            Value = 2.0
                        },
                        new
                        {
                            Id = new Guid("ff6f9c15-5624-48b6-bbe3-3bc613067041"),
                            DataUnit = (short)5,
                            Description = "Khoảng cách tiêu chuẩn để được coi là gần điểm đến của tài xế.",
                            Key = "NEAR_DESTINATION_DISTANCE",
                            Value = 1.0
                        },
                        new
                        {
                            Id = new Guid("1f4c3802-f484-4253-aa7d-931e80a65d1c"),
                            DataUnit = (short)0,
                            Description = "Phần trăm lương mà tài xế nhận được từ tổng giá trị chuyến đi.",
                            Key = "DRIVER_WAGE_PERCENT",
                            Value = 80.0
                        },
                        new
                        {
                            Id = new Guid("52c8625f-c0a4-4ef7-825a-d24bb6f7a1bf"),
                            DataUnit = (short)6,
                            Description = "Số lần tối đa mà khách hàng có thể hủy chuyến trong một khoảng thời gian nhất định.",
                            Key = "TRIP_CANCELLATION_LIMIT",
                            Value = 20.0
                        },
                        new
                        {
                            Id = new Guid("b02d4976-b868-4e81-a5fa-48afc1755aa0"),
                            DataUnit = (short)1,
                            Description = "Khoảng thời gian mà trong đó khách hàng sẽ bị phạt nếu hủy chuyến quá số lần tối đa.",
                            Key = "TRIP_CANCELLATION_WINDOW",
                            Value = 10.0
                        },
                        new
                        {
                            Id = new Guid("6829e465-9950-414a-9b27-a5583e5507e7"),
                            DataUnit = (short)1,
                            Description = "Thời gian mà khách hàng sẽ bị cấm đặt chuyến sau khi hủy quá số lần cho phép.",
                            Key = "CANCELLATION_BAN_DURATION",
                            Value = 15.0
                        },
                        new
                        {
                            Id = new Guid("61dce70b-4323-4b72-9070-42c36dd6bdec"),
                            DataUnit = (short)7,
                            Description = "Đánh giá trung bình tối thiểu mà tài xế cần đạt được để tiếp tục lái xe.",
                            Key = "RATING_THRESHOLD",
                            Value = 1.5
                        },
                        new
                        {
                            Id = new Guid("1c461b6a-f837-4c5c-b686-2fb04259fdab"),
                            DataUnit = (short)3,
                            Description = "Khoảng thời gian mà tài xế sẽ nhận được cảnh báo nếu đánh giá của họ dưới ngưỡng cho phép.",
                            Key = "WARNING_DURATION",
                            Value = 30.0
                        },
                        new
                        {
                            Id = new Guid("682ed922-3d2c-4c14-b6e2-6642b9ae2f0c"),
                            DataUnit = (short)8,
                            Description = "Số dư tối thiểu mà tài xế cần duy trì trong tài khoản của mình.",
                            Key = "MINIMUM_BALANCE_LIMIT",
                            Value = -100000.0
                        },
                        new
                        {
                            Id = new Guid("2bc8f930-ecc5-45a0-85df-187decda7e68"),
                            DataUnit = (short)3,
                            Description = "Khoảng thời gian mà tài xế phải trả nợ nếu số dư của họ thấp hơn giới hạn cho phép.",
                            Key = "DEBT_REPAYMENT_PERIOD",
                            Value = 30.0
                        },
                        new
                        {
                            Id = new Guid("e5c4069a-a40d-44dd-b090-7aff89c84262"),
                            DataUnit = (short)7,
                            Description = "Ngưỡng số dư tối thiểu mà tài xế cần duy trì để hết bị cảnh báo.",
                            Key = "BALANCE_THRESHOLD",
                            Value = 0.0
                        });
                });

            modelBuilder.Entity("Domain.DataModels.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookerId")
                        .HasColumnType("uuid")
                        .HasColumnName("booker_id");

                    b.Property<Guid?>("CanceledBy")
                        .HasColumnType("uuid")
                        .HasColumnName("canceled_by");

                    b.Property<Guid>("CartypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("cartype_id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<Guid>("EndLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("end_location_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid")
                        .HasColumnName("passenger_id");

                    b.Property<string>("PassengerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("passenger_name");

                    b.Property<string>("PassengerPhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("passenger_phone_number");

                    b.Property<short>("PaymentMethod")
                        .HasColumnType("smallint")
                        .HasColumnName("payment_method");

                    b.Property<DateTime>("PickupTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pickup_time");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<Guid>("StartLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("start_location_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.HasKey("Id");

                    b.HasIndex("BookerId");

                    b.HasIndex("CanceledBy");

                    b.HasIndex("CartypeId");

                    b.HasIndex("DriverId");

                    b.HasIndex("EndLocationId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("StartLocationId");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.TripImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("image_url");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid")
                        .HasColumnName("trip_id");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("tripimages", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("Birth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birth")
                        .HasDefaultValueSql("'-infinity'::timestamp without time zone");

                    b.Property<int>("CanceledTripCount")
                        .HasColumnType("integer")
                        .HasColumnName("canceled_trip_count");

                    b.Property<DateTime?>("CancellationBanUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("cancellation_ban_until");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("character varying")
                        .HasColumnName("device_token");

                    b.Property<string>("DisabledReason")
                        .HasColumnType("character varying")
                        .HasColumnName("disabled_reason");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<Guid?>("GuardianId")
                        .HasColumnType("uuid")
                        .HasColumnName("guardian_id");

                    b.Property<bool>("Isdriver")
                        .HasColumnType("boolean")
                        .HasColumnName("isdriver");

                    b.Property<bool>("Isverify")
                        .HasColumnType("boolean")
                        .HasColumnName("isverify");

                    b.Property<DateTime?>("LastTripCancellationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_trip_cancellation_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Otp")
                        .HasColumnType("character varying")
                        .HasColumnName("otp");

                    b.Property<DateTime?>("OtpExpiryTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("otp_expiry_time")
                        .HasDefaultValueSql("'-infinity'::timestamp without time zone");

                    b.Property<string>("Passcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("passcode")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("PasscodeResetToken")
                        .HasColumnType("character varying")
                        .HasColumnName("passcode_reset_token");

                    b.Property<DateTime?>("PasscodeResetTokenExpiryTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("passcode_reset_token_expiry_time")
                        .HasDefaultValueSql("'-infinity'::timestamp without time zone");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<int>("RatingCount")
                        .HasColumnType("integer")
                        .HasColumnName("rating_count");

                    b.Property<short>("RatingStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("rating_status");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("character varying")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<int>("TotalRating")
                        .HasColumnType("integer")
                        .HasColumnName("total_rating");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<DateTime?>("WarnedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("warned_time");

                    b.HasKey("Id");

                    b.HasIndex("GuardianId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("due_date");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("wallets", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Wallettransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("character varying")
                        .HasColumnName("external_transaction_id");

                    b.Property<short>("PaymentMethod")
                        .HasColumnType("smallint")
                        .HasColumnName("payment_method");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<Guid?>("TripId")
                        .HasColumnType("uuid")
                        .HasColumnName("trip_id");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("WalletId");

                    b.ToTable("wallettransactions", (string)null);
                });

            modelBuilder.Entity("Domain.DataModels.Appfeedback", b =>
                {
                    b.HasOne("Domain.DataModels.User", "User")
                        .WithMany("Appfeedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_feedback_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DataModels.Car", b =>
                {
                    b.HasOne("Domain.DataModels.Cartype", "Type")
                        .WithMany("Cars")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("fk_car_type");

                    b.HasOne("Domain.DataModels.User", "User")
                        .WithOne("Car")
                        .HasForeignKey("Domain.DataModels.Car", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_car_user");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DataModels.Chat", b =>
                {
                    b.HasOne("Domain.DataModels.User", "ReceiverNavigation")
                        .WithMany("ChatReceiverNavigations")
                        .HasForeignKey("Receiver")
                        .IsRequired()
                        .HasConstraintName("fk_user_receiver");

                    b.HasOne("Domain.DataModels.User", "SenderNavigation")
                        .WithMany("ChatSenderNavigations")
                        .HasForeignKey("Sender")
                        .IsRequired()
                        .HasConstraintName("fk_user_sender");

                    b.HasOne("Domain.DataModels.Trip", "Trip")
                        .WithMany("Chats")
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("fk_trip_chat");

                    b.Navigation("ReceiverNavigation");

                    b.Navigation("SenderNavigation");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Domain.DataModels.Driverdocument", b =>
                {
                    b.HasOne("Domain.DataModels.Car", "Car")
                        .WithMany("Driverdocuments")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("fk_car_document");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Domain.DataModels.Fee", b =>
                {
                    b.HasOne("Domain.DataModels.Cartype", "CarTypeNavigation")
                        .WithMany("Fees")
                        .HasForeignKey("CarType")
                        .IsRequired()
                        .HasConstraintName("fk_type_fee");

                    b.Navigation("CarTypeNavigation");
                });

            modelBuilder.Entity("Domain.DataModels.Feepolicy", b =>
                {
                    b.HasOne("Domain.DataModels.Fee", "Fee")
                        .WithMany("Feepolicies")
                        .HasForeignKey("FeeId")
                        .IsRequired()
                        .HasConstraintName("fk_fee_policy");

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("Domain.DataModels.Location", b =>
                {
                    b.HasOne("Domain.DataModels.User", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DataModels.Rating", b =>
                {
                    b.HasOne("Domain.DataModels.User", "RateeNavigation")
                        .WithMany("RatingRateeNavigations")
                        .HasForeignKey("Ratee")
                        .IsRequired()
                        .HasConstraintName("fk_ratee_user");

                    b.HasOne("Domain.DataModels.User", "RaterNavigation")
                        .WithMany("RatingRaterNavigations")
                        .HasForeignKey("Rater")
                        .IsRequired()
                        .HasConstraintName("fk_rater_user");

                    b.HasOne("Domain.DataModels.Trip", "Trip")
                        .WithMany("Ratings")
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("fk_rating_trip");

                    b.Navigation("RateeNavigation");

                    b.Navigation("RaterNavigation");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Domain.DataModels.Report", b =>
                {
                    b.HasOne("Domain.DataModels.Trip", "Trip")
                        .WithMany("Reports")
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("fk_trip_report");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Domain.DataModels.Trip", b =>
                {
                    b.HasOne("Domain.DataModels.User", "Booker")
                        .WithMany("TripBookers")
                        .HasForeignKey("BookerId")
                        .IsRequired()
                        .HasConstraintName("fk_booker_trip");

                    b.HasOne("Domain.DataModels.User", "Canceler")
                        .WithMany("TripCancelers")
                        .HasForeignKey("CanceledBy")
                        .HasConstraintName("fk_canceler_trip");

                    b.HasOne("Domain.DataModels.Cartype", "Cartype")
                        .WithMany("Trips")
                        .HasForeignKey("CartypeId")
                        .IsRequired()
                        .HasConstraintName("fk_cartype_trip");

                    b.HasOne("Domain.DataModels.User", "Driver")
                        .WithMany("TripDrivers")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("fk_driver_trip");

                    b.HasOne("Domain.DataModels.Location", "EndLocation")
                        .WithMany("TripEndLocations")
                        .HasForeignKey("EndLocationId")
                        .IsRequired()
                        .HasConstraintName("fk_end_location");

                    b.HasOne("Domain.DataModels.User", "Passenger")
                        .WithMany("TripPassengers")
                        .HasForeignKey("PassengerId")
                        .IsRequired()
                        .HasConstraintName("fk_passenger_trip");

                    b.HasOne("Domain.DataModels.Location", "StartLocation")
                        .WithMany("TripStartLocations")
                        .HasForeignKey("StartLocationId")
                        .IsRequired()
                        .HasConstraintName("fk_start_location");

                    b.Navigation("Booker");

                    b.Navigation("Canceler");

                    b.Navigation("Cartype");

                    b.Navigation("Driver");

                    b.Navigation("EndLocation");

                    b.Navigation("Passenger");

                    b.Navigation("StartLocation");
                });

            modelBuilder.Entity("Domain.DataModels.TripImage", b =>
                {
                    b.HasOne("Domain.DataModels.Trip", "Trip")
                        .WithMany("TripImages")
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("fk_trip_tripimage");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Domain.DataModels.User", b =>
                {
                    b.HasOne("Domain.DataModels.User", "Guardian")
                        .WithMany("InverseGuardian")
                        .HasForeignKey("GuardianId")
                        .HasConstraintName("fk_user_guardian");

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("Domain.DataModels.Wallet", b =>
                {
                    b.HasOne("Domain.DataModels.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_wallet_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DataModels.Wallettransaction", b =>
                {
                    b.HasOne("Domain.DataModels.Trip", "Trip")
                        .WithMany("Wallettransactions")
                        .HasForeignKey("TripId")
                        .HasConstraintName("fk_trip_transaction");

                    b.HasOne("Domain.DataModels.Wallet", "Wallet")
                        .WithMany("Wallettransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("fk_wallet_transaction");

                    b.Navigation("Trip");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.DataModels.Car", b =>
                {
                    b.Navigation("Driverdocuments");
                });

            modelBuilder.Entity("Domain.DataModels.Cartype", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Fees");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Domain.DataModels.Fee", b =>
                {
                    b.Navigation("Feepolicies");
                });

            modelBuilder.Entity("Domain.DataModels.Location", b =>
                {
                    b.Navigation("TripEndLocations");

                    b.Navigation("TripStartLocations");
                });

            modelBuilder.Entity("Domain.DataModels.Trip", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");

                    b.Navigation("TripImages");

                    b.Navigation("Wallettransactions");
                });

            modelBuilder.Entity("Domain.DataModels.User", b =>
                {
                    b.Navigation("Appfeedbacks");

                    b.Navigation("Car");

                    b.Navigation("ChatReceiverNavigations");

                    b.Navigation("ChatSenderNavigations");

                    b.Navigation("InverseGuardian");

                    b.Navigation("Locations");

                    b.Navigation("RatingRateeNavigations");

                    b.Navigation("RatingRaterNavigations");

                    b.Navigation("TripBookers");

                    b.Navigation("TripCancelers");

                    b.Navigation("TripDrivers");

                    b.Navigation("TripPassengers");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Domain.DataModels.Wallet", b =>
                {
                    b.Navigation("Wallettransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
